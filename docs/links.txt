This file contains a list of websites I have found helpful as I have worked on
this project.
==============================================================================

PCjr
----
http://www.oldskool.org/shrines/pcjr_tandy
http://www.brutman.com/PCjr/

General OS References
---------------------
https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf
https://gitlab.com/sortie/meaty-skeleton/tree/master/kernel
https://littleosbook.github.io/

x86 References
--------------
https://en.wikibooks.org/wiki/X86_Assembly

16-bit GCC Compilation
----------------------
http://dc0d32.blogspot.com/2010/06/real-mode-in-c-with-gcc-writing.html
http://www.delorie.com/gnu/docs/binutils/as_270.html
https://www.codeproject.com/articles/664165/writing-a-boot-loader-in-assembly-and-c-part
http://zoo.cs.yale.edu/classes/cs422/2010/lec/l3-hw
https://github.com/davidgiven/ack

Bootloader
----------
http://wiki.osdev.org/Rolling_Your_Own_Bootloader
http://wiki.osdev.org/Bootloader
http://wiki.osdev.org/ATA_in_x86_RealMode_(BIOS)
http://wiki.osdev.org/Floppy_Disk_Controller#Accessing_Floppies_in_Real_Mode
http://core.ecu.edu/csci/wirthj/Assembly8088/upg8088.html
http://mikeos.sourceforge.net/write-your-own-os.html
https://github.com/csssuf/bobbyjunior/blob/master/kernel/src/mbr.s
http://duartes.org/gustavo/blog/post/kernel-boot-process/
https://en.wikipedia.org/wiki/X86_memory_segmentation
http://wiki.osdev.org/System_Initialization_(x86)
http://www.independent-software.com/writing-your-own-bootloader-for-a-toy-operating-system-2/

Boot off of USB
---------------
https://board.flatassembler.net/topic.php?t=12389
http://forum.osdev.org/viewtopic.php?f=1&t=20561
http://f.osdev.org/viewtopic.php?f=1&t=28781
https://en.wikipedia.org/wiki/INT_13H
http://stackoverflow.com/questions/11174399/pc-boot-dl-register-and-drive-number

Graphics on the PCjr (CGA)
--------------------------
https://en.wikipedia.org/wiki/Color_Graphics_Adapter

Hacky C Tricks
--------------
http://stackoverflow.com/questions/12371450/how-are-variable-arguments-implemented-in-gcc

VGA
---
http://wiki.osdev.org/VGA_Hardware
http://f.osdev.org/viewtopic.php?p=260739
http://wiki.osdev.org/Drawing_In_Protected_Mode
http://www.brackeen.com/vga/bitmaps.html
https://en.wikipedia.org/wiki/INT_10H
http://www.delorie.com/djgpp/doc/ug/graphics/vga.html
http://www.drdobbs.com/parallel/graphics-programming-black-book/184404919

Image Quantization/Reduction
----------------------------
http://www.imagemagick.org/Usage/quantize/#extract
http://www.imagemagick.org/script/quantize.php

Real Time Clock (RTC) & Non-blocking Keyboard Control
-----------------------------------------------------
http://stackoverflow.com/questions/41105383/get-system-time-with-bios-interrupt-in-assembly
http://webpages.charter.net/danrollins/techhelp/0247.HTM
http://webpages.charter.net/danrollins/techhelp/0230.HTM
http://wiki.osdev.org/CMOS
http://stackoverflow.com/questions/13143774/how-to-read-key-without-waiting-for-it-assembly-8086

Random Number Generator
-----------------------
http://stackoverflow.com/questions/7602919/how-do-i-generate-random-numbers-without-rand-function
https://en.wikipedia.org/wiki/Linear-feedback_shift_register
